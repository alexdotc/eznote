#!/usr/bin/env python

import argparse
import datetime
import sqlite3

parser = argparse.ArgumentParser(description='eznote CLI options parser')

parser.add_argument("note", metavar="NOTE", type=str, nargs='?', 
                    help="Write an inline note and save it")
parser.add_argument("-t", "--tags", metavar="TAGS", type=str, nargs='+',
                    help="Tag your note with helpful tags")
parser.add_argument("-o", "--db", metavar="DB", type=str, 
                   default="eznote.sqlite", help="SQLite db output file")
parser.add_argument("-l", "--list", action="store_true", help="List notes")
parser.add_argument("-v", "--verbose", action="store_true",
                    help="List notes with tags and other metadata")
parser.add_argument("-s", "--search", metavar="TERMS", type=str, nargs='+',
                    help="Filter notes list tags")

args = parser.parse_args()

class Note:
    def __init__(self, text, tags=None, created=datetime.datetime.now(), 
                 modified=datetime.datetime.now()):
        self.created = created
        self.modified = modified
        self.text = text
        self.tags = [] if not tags else tags

    def __repr__(self):
        return f"{self.__class__.__name__}(\"{self.text}\", {self.tags})"

    def __str__(self):
        human_readable = self.modified.strftime("%Y-%m-%d %I:%M %p")
        return f"{human_readable} -- {self.text}"

def init_db(db: str) -> sqlite3.Connection:
    con = sqlite3.connect(db)
    cur = con.cursor()
    try:
        cur.execute("CREATE TABLE notes " +
                    "(text text, tags text, created real, modified real)")
    except sqlite3.OperationalError:
        pass
    cur.close()
    return con

def list_notes(cur: sqlite3.Cursor, verbose: bool=False, search: list=[]):
    cur.execute("SELECT * FROM notes ORDER BY modified DESC")
    for note in cur.fetchall():
        note = Note(note[0], note[1].split(),
               datetime.datetime.fromtimestamp(note[2]),
               datetime.datetime.fromtimestamp(note[3]),
               )
        if search and not [x for x in search if x in note.tags]: continue
        print(note, f"-- TAGS: {note.tags}" if verbose else "")

db = init_db(args.db)
cur = db.cursor()

if args.note:
    note = Note(args.note, args.tags)
    cur.execute("INSERT INTO notes VALUES (?, ?, ?, ?)", 
                                          (note.text,
                                          " ".join(note.tags),
                                          note.created.timestamp(),
                                          note.modified.timestamp(),
                                          )
               )
    print("New note written: ", note)

elif not args.list:
    list_notes(cur, args.verbose, args.search)

if args.list:
    list_notes(cur, args.verbose, args.search)

db.commit()
cur.close()
db.close()
